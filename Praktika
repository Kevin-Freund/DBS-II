--Neues Semester (3. Semester/DBS II)



--MEILENSTEIN 1

--Aufgabe 2)
--a)
Select LEFT (KunPLZ, 2) from Kunde Group by LEFT (KunPLZ, 2)

--b)
SELECT * INTO Niederlassung FROM trommelhelden..quelleNiederlassung
Alter table Niederlassung add constraint pk_NLNr primary key (NLNr)

SELECT * INTO Gebiet FROM trommelhelden..quelleGebiet
Alter table Gebiet add constraint pk_Gebiet primary key (GebietID)
Alter table Gebiet add constraint fk_NLNr foreign key (NLNr) references Niederlassung(NLNr)

--c)
Alter Table Mitarbeiter Add NLNr Int Default NULL;

--d)
UPDATE Mitarbeiter Set NLNr = (Select NLNr from Niederlassung where Mitarbeiter.MitEinsatzort = Ort)
Select * from Mitarbeiter

--e) 
Alter Table Mitarbeiter Drop column MitEinsatzort
Select * from Mitarbeiter

--f)
Alter table Mitarbeiter add foreign key (NLNr) references Niederlassung(NLNr)


--Aufgabe 3)
Select MItID, Ort from Mitarbeiter m Join Niederlassung n on n.NLNr = m.NLNr 
Select MITID from Mitarbeiter m Join Niederlassung n on n.NLNr = m.NLNr Where Ort = 'Dresden'
Select Ort from Niederlassung n Join Mitarbeiter m on m.NLNr = n.NLNr Where MitID = '106'


--Aufgabe 4)
Insert into Kunde Select * from trommelhelden..quelleKunde Where KunNr not in (Select KunNr from Kunde)

INSERT INTO Auftrag SELECT * FROM trommelhelden..quelledbs2Auftrag
INSERT INTO Montage SELECT * FROM trommelhelden..quelledbs2Montage

Select Count(*) from Auftrag
Select Count(*) from Montage


--Aufgabe 5)
create table Rechnung (
	KunNr int not null,
	AufNr int not null,
	RechDat date not null,
	RechBetrag smallmoney not null)

Alter table Rechnung add foreign key (KunNr) references Kunde(KunNr)
Alter table Rechnung add foreign key  (AufNr) references Auftrag(AufNr)
Alter table Rechnung add primary key (KunNr, AufNr) 

--Aufgabe 6)
Create View neueAufträge
As
Select a.AufNr, a.KunNr, m.MitID 
from Auftrag a 
Join Kunde k on a.KunNr = k.KunNr
Join Gebiet g on g.GebietID = Left(KunPLZ, 2)
Join Mitarbeiter m on m.NLNr = g.NLNr
Where a.MitID is null

Select * from neueAufträge



--MEILENSTEIN 2

--Aufgabe 4
CREATE TABLE artikel (
 aid INT PRIMARY KEY,
 bezeichnung VARCHAR(30),
 bestand INT CHECK (bestand>=0),
 preis DECIMAL(10,2) CHECK (preis>=0)
)
INSERT INTO artikel VALUES(111, 'Stuhl', 1200, 23.60)
INSERT INTO artikel VALUES(112, 'Sofa', 100, 223.60)
INSERT INTO artikel VALUES(113, 'Sessel', 66, 123.60)
INSERT INTO artikel VALUES(115, 'Tisch', 20, 20.00)
INSERT INTO artikel VALUES(117, 'Regal', 12, 3.99)

--4. a)
Begin Transaction T4 
	Update artikel set bezeichnung = 'Couch' where bezeichnung = 'Sofa'
	Select * from artikel
	rollback
Select * from artikel

--4. b)
Begin Transaction T4 
	Update artikel set bezeichnung = 'Couch' where bezeichnung = 'Sofa'
	Select * from artikel
commit Transaction T4
Select * from artikel

--4. c)
Begin Transaction T4c
	Declare @menge_sessel Int; 
	Set @menge_sessel = 10;
	Declare @menge_tisch INT;
	Set @menge_tisch = 25;
	Update artikel set bestand -= @menge_sessel where bezeichnung = 'sessel'
	Update artikel set bestand -= @menge_tisch where bezeichnung ='tisch'
	Select * from artikel
	rollback
--diese Art der Semantik ist nicht sinnvoll, da hier direkt davon ausgegangen wird, dass die Bestellung möglich sei/alles auf Bestand sei
--ohne dies vorher abzufragen.
--So funkioniert bspw. die Bestellung von 25 Tischen nicht, siehe Fehlermeldung

--4. d)
Begin Transaction T4d
	Declare @menge_stuhl Int;
	Set @menge_stuhl = 500;
	Declare @summe Int;
	Update artikel set bestand += @menge_stuhl where bezeichnung ='stuhl'
	Set @summe = (Select Sum(bestand) from artikel);
	if(@summe > 2000)
		rollback
	else
		commit

Select Sum(bestand) from artikel
Update artikel set bestand -= 500 where bezeichnung ='stuhl'
